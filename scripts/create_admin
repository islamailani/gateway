#! /usr/bin/env node

'use strict';

// Allow me to require ES2015 modules
require('babel-core/register');

if (process.env.NODE_ENV != 'production') {
  require('dotenv').load({ path: `${__dirname}/../.env` });
}

const readline = require('readline');
const commandLineArgs = require('command-line-args');
const getUsage = require('command-line-usage');

const { Admin } = require('./../src/apps/users/models/admin');
const { User } = require('./../src/apps/users/models/user');

const optionDefinitions = [
  { name: 'nonadmin', alias: 'n', type: Boolean, defaultValue: false },
  { name: 'username', alias: 'u', type: String },
  { name: 'first', alias: 'f', type: String },
  { name: 'last', alias: 'l', type: String },
  { name: 'email', alias: 'e', type: String },
  { name: 'password', alias: 'p', type: String },
  { name: 'help', alias: 'h', type: Boolean, defaultValue: false },
];

const usageSections = [
  {
    header: 'Create Admin',
    content: [
      'Creates a user/admin user for LetsMeet.',
      'The data not provided through options will be asked interactively.',
    ],
  },
  {
    header: 'Synopsis',
    content: [
      '$ npm run createadmin',
      '$ npm run createadmin -- <option> <value>',
      '$ npm run createadmin -- [[bold]{-u} [underline]{username}] [[bold]{-f} [underline]{firstname}] ...',
      '$ npm run createadmin -- [bold]{--help}',
    ],
  },
  {
    header: 'Options',
    optionList: [
      {
        name: 'username',
        alias: 'u',
        typeLabel: '[underline]{string}',
        description: 'The username of the admin.',
      },
      {
        name: 'first',
        alias: 'f',
        typeLabel: '[underline]{string}',
        description: 'The first name of the admin.',
      },
      {
        name: 'last',
        alias: 'l',
        typeLabel: '[underline]{string}',
        description: 'The last name of the admin.',
      },
      {
        name: 'email',
        alias: 'e',
        typeLabel: '[underline]{string}',
        description: 'The email of the admin.',
      },
      {
        name: 'password',
        alias: 'p',
        typeLabel: '[underline]{string}',
        description: 'The password of the admin.',
      },
    ],
  },
  {
    header: 'Misc',
    optionList: [
      {
        name: 'nonadmin',
        alias: 'n',
        description: 'Create a simple user.',
      },
      {
        name: 'help',
        alias: 'h',
        description: 'Print this usage guide.',
      },
    ],
  },
  {
    header: 'Examples',
    content: [
      {
        desc: '1. Create the admin interactively',
        example: '$ npm run createadmin',
      },
      {
        desc: '2. Set the username and the rest interactive',
        example: '$ npm run createadmin -- --u strattadb',
      },
      {
        desc: '3. Create a simple user (not an admin)',
        example: '$ npm run createadmin -- --nonadmin',
      },
    ],
  },
];

main();

async function main () {
  const args = commandLineArgs(optionDefinitions);

  if (args.help) {
    console.log(getUsage(usageSections));
    return;
  }

  let data = await readData(args);

  try {
    await Admin.create(data);
    console.log(`Admin created successfully!\nWelcome, ${data.firstName}!`);
    process.exit(0);
  } catch (e) {
    console.error(`Something bad happened!\n${e}`);
    process.exit(1);
  }
}

async function readData (args) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  let data = {
    username: args.username ? args.username : await readValue('Enter username: ', rl),
    firstName: args.first ? args.first : await readValue('Enter first name: ', rl),
    lastName: args.last ? args.last : await readValue('Enter last name: ', rl),
    email: args.email ? args.email : await readValue('Enter email: ', rl),
    password: args.password ? args.password : await readValue('Enter password: ', rl),
  };

  // We don't need the readline anymore
  rl.close();

  return data;
}

function readValue (msg, rl) {
  return new Promise((resolve) => {
    rl.question(msg, (value) => resolve(value));
  });
}
